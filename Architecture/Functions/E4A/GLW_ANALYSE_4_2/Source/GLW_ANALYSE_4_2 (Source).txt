FUNCTION /excel4ap/glw_analyse_4_2.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(ZYEAR) TYPE  STRING
*"     VALUE(RECTYPE) TYPE  STRING
*"     VALUE(VERSION) TYPE  STRING
*"     VALUE(LEDGER) TYPE  STRING
*"     VALUE(CONTAREA) TYPE  STRING
*"     VALUE(FUNCTIONTYPE) TYPE  STRING
*"  TABLES
*"      STABNAME STRUCTURE  /EXCEL4AP/LIST_STRUCT
*"      FIELD_LIST STRUCTURE  /EXCEL4AP/LIST_STRUCT
*"      COND_LIST STRUCTURE  /EXCEL4AP/LIST_STRUCT
*"      GROUP_LIST STRUCTURE  /EXCEL4AP/LIST_STRUCT
*"      COMPANYCODE STRUCTURE  SELOPT
*"      ACCOUNTS STRUCTURE  SELOPT
*"      ANALYSERESULT STRUCTURE  /EXCEL4AP/EXPORT_STRUCT
*"      BUSAREA STRUCTURE  SELOPT
*"      COSTCENTRE STRUCTURE  SELOPT
*"      PROFCENTRE STRUCTURE  SELOPT
*"      SEGMENT STRUCTURE  SELOPT
*"      FUNCAREA STRUCTURE  SELOPT
*"      COSTELEM STRUCTURE  SELOPT
*"      USER1 STRUCTURE  SELOPT
*"      IORDER STRUCTURE  SELOPT
*"      ACTIVITY STRUCTURE  SELOPT
*"      SKF STRUCTURE  SELOPT
*"      RETURN STRUCTURE  /EXCEL4AP/EXPORT_STRUCT
*"      USER2 STRUCTURE  SELOPT
*"      USER3 STRUCTURE  SELOPT
*"      USER4 STRUCTURE  SELOPT
*"      USER5 STRUCTURE  SELOPT
*"      USER6 STRUCTURE  SELOPT
*"      USER7 STRUCTURE  SELOPT
*"      USER8 STRUCTURE  SELOPT
*"      USER9 STRUCTURE  SELOPT
*"      USER10 STRUCTURE  SELOPT
*"      USER11 STRUCTURE  SELOPT
*"      USER12 STRUCTURE  SELOPT
*"      USER13 STRUCTURE  SELOPT
*"      USER14 STRUCTURE  SELOPT
*"      USER15 STRUCTURE  SELOPT
*"      USER16 STRUCTURE  SELOPT
*"      CUST1 STRUCTURE  SELOPT OPTIONAL
*"      CUST2 STRUCTURE  SELOPT OPTIONAL
*"      CUST3 STRUCTURE  SELOPT OPTIONAL
*"      CUST4 STRUCTURE  SELOPT OPTIONAL
*"      CUST5 STRUCTURE  SELOPT OPTIONAL
*"      CUST6 STRUCTURE  SELOPT OPTIONAL
*"      CUST7 STRUCTURE  SELOPT OPTIONAL
*"      CUST8 STRUCTURE  SELOPT OPTIONAL
*"      CUST9 STRUCTURE  SELOPT OPTIONAL
*"      CUST10 STRUCTURE  SELOPT OPTIONAL
*"      CUST11 STRUCTURE  SELOPT OPTIONAL
*"      CUST12 STRUCTURE  SELOPT OPTIONAL
*"      CUST13 STRUCTURE  SELOPT OPTIONAL
*"      CUST14 STRUCTURE  SELOPT OPTIONAL
*"      CUST15 STRUCTURE  SELOPT OPTIONAL
*"----------------------------------------------------------------------


*{   INSERT         DEVK900076                                        1

*
* Excel4Apps Analyse balance - Excel4Apps use only
* Author: Grant Peterson
* Version: 1.05.00
* 3.0 Changes: Add Additional USER parameters
* 4.13 Projects perofrmance improvement and NWA elements added

*Declarations
  DATA:       wa_stabname TYPE /excel4ap/list_struct,
              error TYPE string,
              tabref TYPE REF TO data,
              position LIKE sy-fdpos,
              struct_type  TYPE REF TO cl_abap_structdescr,
              table_type   TYPE REF TO cl_abap_tabledescr,
              symb_tab     TYPE  cl_abap_structdescr=>symbol_table,
              symb         LIKE LINE OF symb_tab,
              comp_tab     TYPE  cl_abap_structdescr=>component_table,
              comp         LIKE LINE OF comp_tab,
              wa_field(50) TYPE c,
              numlines TYPE i,
              numfields(2) TYPE c,
              fieldref(21) TYPE c,
              length TYPE  i,
              pointer TYPE i,
              oref         TYPE REF TO cx_root,
              functionname(30),
            projecttype(20),
            cumulative(1),
            wa_selopt             TYPE selopt,
            ta_selopt             TYPE TABLE OF selopt,
            ta_user2              TYPE TABLE OF selopt,
            wbs_info              LIKE prps,
            ps_object_list        TYPE TABLE OF objlist_ps,
            ps_object             LIKE objlist_ps,
            ps_object_list_high   TYPE TABLE OF objlist_ps,
            ps_rech_tab           TYPE TABLE OF ionre,
            ps_wbs_hierarchy_tab  TYPE TABLE OF rcj_pspnr2,
            network_number        LIKE aufk-aufnr,
            activity_number(4),
            wa_order              LIKE aufk-aufnr,
            operation_in_order    LIKE afvc,
            project_number        LIKE proj-pspnr,
            wbs_number            LIKE prps-pspnr,
            it_activity_list TYPE TABLE OF bapi_activity_list,
            it_actelement_list TYPE TABLE OF bapi_actelement_list,
            et_activity_elements TYPE TABLE OF bapi_bus2002_actelem_detail,
            et_return TYPE TABLE OF bapiret2,
            wa_actelement TYPE bapi_bus2002_actelem_detail,
            wa_activitylist TYPE bapi_activity_list.


*Field symbols
  FIELD-SYMBOLS <i_tab> TYPE STANDARD TABLE.
  FIELD-SYMBOLS: <f1> TYPE any, <f2> TYPE any, <f3> TYPE any,
                 <f4> TYPE any.

*Clear results tables
  REFRESH analyseresult.
  REFRESH return.

  "Remember projects selections. No need to get the hierarchy for each summary table
  CLEAR ta_selopt.
  CLEAR ta_user2.

  LOOP AT stabname INTO wa_stabname. "For multiple table calls

    CLEAR struct_type.
    REFRESH symb_tab.
    REFRESH comp_tab.

    "Remember projects selections. No need to get the hierarchy for each summary table
    IF ta_user2 IS INITIAL AND NOT ta_selopt IS INITIAL.
      ta_user2 = ta_selopt.
    ENDIF.

    TRY.

*Create internal structure based on table
        struct_type ?=
                  cl_abap_typedescr=>describe_by_name( wa_stabname-xl4afield ).
        symb_tab = struct_type->get_symbols( ).

*Create a component table from the symbol table.
        LOOP AT symb_tab INTO symb.
          comp-name = symb-name.
          comp-type = symb-type.
          APPEND comp TO comp_tab.
        ENDLOOP.

*Create internal table based on structure
        struct_type = cl_abap_structdescr=>create( comp_tab ).
        table_type = cl_abap_tabledescr=>create( struct_type ).
        CREATE DATA tabref TYPE HANDLE table_type.
        ASSIGN tabref->* TO <i_tab>.

        SPLIT functiontype AT '|' INTO functionname projecttype cumulative.

        IF functionname = 'GLW_GET_PROJECT'.

          "Restore projects selections. No need to get the hierarchy for each summary table
          IF NOT ta_user2 IS INITIAL.

            ta_selopt = ta_user2.

          ELSE.


            LOOP AT user2 INTO wa_selopt.

              IF projecttype = 'PROJECT'.

                CALL FUNCTION 'CONVERSION_EXIT_KONPD_INPUT'
                  EXPORTING
                    input  = wa_selopt-low
                  IMPORTING
                    output = project_number.

                IF sy-subrc <> 0.

                  return-field1 = 'PROJECT CONVERSION'.
                  APPEND return.

                ELSE.

                  CALL FUNCTION 'GET_PS_OBJECTNUMBER'
                    EXPORTING
                      i_pronr          = project_number
                      i_with_hierarchy = cumulative
                      i_with_network   = cumulative
                      i_with_orders    = cumulative
                    IMPORTING
                      e_prps           = wbs_info
                    TABLES
                      t_objects        = ps_object_list
                      rech_tab         = ps_rech_tab
                      prps_tab         = ps_wbs_hierarchy_tab.

                  IF sy-subrc <> 0.

                    return-field1 = 'PRJ/WBS OBJECT NUMBER'.
                    APPEND return.

                  ELSE.

                    LOOP AT ps_object_list INTO ps_object.

                      wa_selopt-low = ps_object-objnr.
                      APPEND wa_selopt TO ta_selopt.

                    ENDLOOP.

                  ENDIF.

                ENDIF.

              ELSEIF projecttype = 'WBS'.

                CALL FUNCTION 'CONVERSION_EXIT_ABPSP_INPUT'
                  EXPORTING
                    input  = wa_selopt-low
                  IMPORTING
                    output = wbs_number.

                IF sy-subrc <> 0.

                  return-field1 = 'WBS CONVERSION'.
                  APPEND return.

                ELSE.

                  CLEAR wbs_info.
                  CLEAR ps_object_list.
                  CLEAR ps_rech_tab.
                  CLEAR ps_wbs_hierarchy_tab.

                  CALL FUNCTION 'GET_PS_OBJECTNUMBER'
                    EXPORTING
                      i_pspnr          = wbs_number
                      i_with_hierarchy = cumulative
                      i_with_network   = cumulative
                      i_with_orders    = cumulative
                    IMPORTING
                      e_prps           = wbs_info
                    TABLES
                      t_objects        = ps_object_list
                      rech_tab         = ps_rech_tab
                      prps_tab         = ps_wbs_hierarchy_tab.

                  IF sy-subrc <> 0.

                    return-field1 = 'PRJ/WBS OBJECT NUMBER'.
                    APPEND return.

                  ELSE.

                    LOOP AT ps_object_list INTO ps_object.

                      wa_selopt-low = ps_object-objnr.

                      IF wa_selopt-high <> ''.

                        CALL FUNCTION 'CONVERSION_EXIT_ABPSP_INPUT'
                          EXPORTING
                            input  = wa_selopt-high
                          IMPORTING
                            output = wbs_number.

                        IF sy-subrc <> 0.

                          return-field1 = 'WBS CONVERSION'.
                          APPEND return.

                        ELSE.

                          CLEAR wbs_info.
                          CLEAR ps_rech_tab.
                          CLEAR ps_wbs_hierarchy_tab.

                          CALL FUNCTION 'GET_PS_OBJECTNUMBER'
                            EXPORTING
                              i_pspnr          = wbs_number
                              i_with_hierarchy = cumulative
                              i_with_network   = cumulative
                              i_with_orders    = cumulative
                            IMPORTING
                              e_prps           = wbs_info
                            TABLES
                              t_objects        = ps_object_list
                              rech_tab         = ps_rech_tab
                              prps_tab         = ps_wbs_hierarchy_tab.

                          IF sy-subrc <> 0.

                            return-field1 = 'PRJ/WBS OBJECT NUMBER'.
                            APPEND return.

                          ELSE.

                            "Can only be one upper item
                            READ TABLE ps_object_list INDEX 1 INTO ps_object.
                            wa_selopt-high = ps_object-objnr.

                          ENDIF.

                        ENDIF.

                      ENDIF.

                      APPEND wa_selopt TO ta_selopt.

                    ENDLOOP.

                  ENDIF.

                ENDIF.

              ELSEIF projecttype = 'NETWORK'.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = wa_selopt-low
                  IMPORTING
                    output = network_number.

                IF sy-subrc <> 0.

                  return-field1 = 'NETWORK CONVERSION'.
                  APPEND return.

                ELSE.

*First get the related WBS number so that we can re run the function
*to include Orders settling to Networks

                  CLEAR wbs_info.
                  CLEAR ps_object_list.
                  CLEAR ps_rech_tab.
                  CLEAR ps_wbs_hierarchy_tab.

                  CALL FUNCTION 'GET_PS_OBJECTNUMBER'
                    EXPORTING
                      i_nplnr          = network_number
                      i_with_hierarchy = cumulative
                      i_with_network   = cumulative
                      i_with_orders    = cumulative
                    IMPORTING
                      e_prps           = wbs_info
                    TABLES
                      t_objects        = ps_object_list
                      rech_tab         = ps_rech_tab
                      prps_tab         = ps_wbs_hierarchy_tab.

                  IF sy-subrc <> 0.

                    return-field1 = 'NETWORK OBJECT NUMBER'.
                    APPEND return.

                  ELSE.

                    "Get the related WBS
                    READ TABLE ps_object_list INDEX 1 INTO ps_object.
                    wbs_number = ps_object-pspnr.

                    CLEAR wbs_info.
                    CLEAR ps_object_list.
                    CLEAR ps_rech_tab.
                    CLEAR ps_wbs_hierarchy_tab.

                    "Now call with both WBS and Network number
                    "so we can get the orders linked if any.
                    CALL FUNCTION 'GET_PS_OBJECTNUMBER'
                      EXPORTING
                        i_nplnr          = network_number
                        i_pspnr          = wbs_number
                        i_with_hierarchy = cumulative
                        i_with_network   = cumulative
                        i_with_orders    = cumulative
                      IMPORTING
                        e_prps           = wbs_info
                      TABLES
                        t_objects        = ps_object_list
                        rech_tab         = ps_rech_tab
                        prps_tab         = ps_wbs_hierarchy_tab.

                    IF sy-subrc <> 0.

                      return-field1 = 'NET/WBS OBJECT NUMBER'.
                      APPEND return.

                    ELSE.

                      LOOP AT ps_object_list INTO ps_object.

                        "Ignore the WBS object itself
                        IF ps_object-objnr(2) <> 'PR'.

                          wa_selopt-low = ps_object-objnr.
                          APPEND wa_selopt TO ta_selopt.

                        ENDIF.

                      ENDLOOP.

                    ENDIF.

                  ENDIF.

                ENDIF.

              ELSEIF projecttype = 'NETWORK_ACTIVITY'.

                SPLIT wa_selopt-low AT ' ' INTO network_number activity_number.

                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                  EXPORTING
                    input  = network_number
                  IMPORTING
                    output = network_number.

                "Get network activity object number
                CALL FUNCTION 'READ_NETWORK_AUFPL_APLZL'
                  EXPORTING
                    nplnr     = network_number
                    vornr     = activity_number
                    autyp_imp = 20
                  IMPORTING
                    afvc_exp  = operation_in_order.

                IF sy-subrc <> 0.

                  return-field1 = 'NETWORK ACTIVITY CONVERSION'.
                  APPEND return.

                ELSE.

                  wa_selopt-low = operation_in_order-objnr.
                  APPEND wa_selopt TO ta_selopt.

                  IF cumulative = 'X'.

                    "Now get any orders linked to network activity
                    SELECT aufnr FROM  afko INTO wa_order
                           WHERE  aufpt  = operation_in_order-aufpl
                           AND    aplzt  = operation_in_order-aplzl.

                      SELECT objnr FROM aufk INTO wa_selopt-low
                        WHERE aufnr = wa_order.

                        APPEND wa_selopt TO ta_selopt.

                      ENDSELECT.

                    ENDSELECT.

                    "And any activity elements
                    wa_activitylist-activity = activity_number.
                    APPEND wa_activitylist TO it_activity_list.

                    CALL FUNCTION 'CN2002_ACTELEMENT_GETDATA'
                      EXPORTING
                        i_network_number     = network_number
                      TABLES
                        it_activity_list     = it_activity_list
                        it_actelement_list   = it_actelement_list
                        et_activity_elements = et_activity_elements
                        et_return            = et_return
                      EXCEPTIONS
                        data_not_retrieved   = 1
                        OTHERS               = 2.

                    IF sy-subrc <> 0.

                      return-field1 = 'NETWORK ACTIVITY ELEMENT RETRIEVAL'.
                      APPEND return.

                    ELSE.

                      "Get the object number for each activity element
                      LOOP AT et_activity_elements INTO wa_actelement.

                        "Get network activity object number
                        CALL FUNCTION 'READ_NETWORK_AUFPL_APLZL'
                          EXPORTING
                            nplnr     = network_number
                            vornr     = wa_actelement-element
                            autyp_imp = 20
                          IMPORTING
                            afvc_exp  = operation_in_order.

                        IF sy-subrc <> 0.
                          return-field1 = 'NETWORK ACTIVITY CONVERSION'.
                          APPEND return.
                        ELSE.
                          wa_selopt-low = operation_in_order-objnr.
                          APPEND wa_selopt TO ta_selopt.
                        ENDIF.

                      ENDLOOP.

                    ENDIF.

                  ENDIF.

                ENDIF.

              ENDIF.

            ENDLOOP.

          ENDIF.

          user2[] = ta_selopt[].

        ENDIF.

*Fetch
        SELECT  (field_list)
            INTO CORRESPONDING FIELDS OF TABLE <i_tab>
            FROM (wa_stabname)
            WHERE (cond_list)
          GROUP BY (group_list).

        "Prep output
        DESCRIBE TABLE <i_tab> LINES numlines.

        "Identify output column
        fieldref = 'ANALYSERESULT-FIELD'.

        "Loop at itab
        DO numlines TIMES.

          "Assign record to field symbol
          READ TABLE <i_tab> INDEX sy-index ASSIGNING <f1>.
          numfields = 0.

          "Extract component for our fields
          LOOP AT field_list INTO wa_field.


            "Check column in our structure
            numfields = numfields + 1.
            IF numfields < 31.

              "Component for our field
              ASSIGN wa_field TO <f2>.
              ASSIGN COMPONENT <f2> OF STRUCTURE <f1> TO <f3>.
              fieldref+19 = numfields.
              "Assign output column to field symbol
              ASSIGN (fieldref) TO <f4>.
              "Assign the value of our field to the output column
              <f4> = <f3>.
            ENDIF.
          ENDLOOP.
          APPEND analyseresult.
        ENDDO.



      CATCH  cx_sy_create_data_error INTO oref.
        error = oref->get_text( ).
      CATCH cx_sy_dynamic_osql_semantics INTO oref.
        error = oref->get_text( ).

    ENDTRY.


*Catch error message
    IF error <> ''.
      return-field1 = error.
      APPEND return.
    ENDIF.

  ENDLOOP.

*}   INSERT


ENDFUNCTION.